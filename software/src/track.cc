/**************************************************************************************************/
/**
 * \file   track.h
 * \brief  Representation of a track in a DAW
 */
/**************************************************************************************************/

#include "track.h"

#include <string.h>

namespace midixer {

/**************************************************************************************************/

bool Track::getMute()
{
    return mute_state_;
}

/**************************************************************************************************/

void Track::setMute(bool mute)
{
    mute_state_ = mute;
}

/**************************************************************************************************/

bool Track::getSolo()
{
    return solo_state_;
}

/**************************************************************************************************/

void Track::setSolo(bool solo)
{
    solo_state_ = solo;
}

/**************************************************************************************************/

bool Track::getArm()
{
    return arm_state_;
}

/**************************************************************************************************/

void Track::setArm(bool arm)
{
    arm_state_ = arm;
}

/**************************************************************************************************/

uint8_t Track::getNumber()
{
    return number_;
}

/**************************************************************************************************/

void Track::setNumber(uint8_t number)
{
    number_ = number;
}

/**************************************************************************************************/

uint8_t Track::getFader()
{
    return fader_level_;
}

/**************************************************************************************************/

void Track::setFader(uint8_t fader)
{
    fader_level_ = fader;
}

/**************************************************************************************************/

int8_t Track::getPan()
{
    return pan_;
}

/**************************************************************************************************/

void Track::setPan(int8_t pan)
{
    pan_ = pan;
}

/**************************************************************************************************/

uint8_t Track::getMeter()
{
    return meter_;
}

/**************************************************************************************************/

void Track::setMeter(uint8_t meter)
{
    meter_ = meter;
}

/**************************************************************************************************/

const char* Track::getName()
{
    return name_;
}

/**************************************************************************************************/

void Track::setName(char name[MAX_TRACK_NAME_LEN]) {
    strncpy(name_, name, MAX_TRACK_NAME_LEN);
    name_[MAX_TRACK_NAME_LEN - 1] = '\0';
}

/**************************************************************************************************/

}   // namespace midixer
